apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: aws-service-access-workflow
  title: AWS Service Access Request
  description: Request access to AWS services based on your user group permissions
  annotations:
    backstage.io/techdocs-ref: dir:.
  tags:
    - aws
    - service-access
    - cloud
    - permissions
spec:
  owner: cloud-platform-team
  type: service
  parameters:
    - title: Repository Configuration
      required:
        - githubOrg
        - githubRepo
      properties:
        githubOrg:
          title: GitHub Organization
          type: string
          description: GitHub organization containing the AWS permissions database
          default: adityakashyap24
          ui:autofocus: true
        githubRepo:
          title: GitHub Repository
          type: string
          description: Repository name containing AWS permissions and services data
          default: aws-permissions-database

    - title: User Information
      required:
        - currentUserEmail
        - currentUserName
      properties:
        currentUserEmail:
          title: Current User Email
          type: string
          description: Your email address
          ui:autofocus: false
        
        currentUserName:
          title: Your Name
          type: string  
          description: Your display name
          ui:autofocus: false

    - title: User Group Selection
      required:
        - selectedUserGroup
      properties:
        selectedUserGroup:
          title: Select Your User Group
          type: string
          description: Choose from your assigned user groups to see available AWS services
          ui:field: SelectFieldFromApi
          ui:options:
            path: "proxy/github-raw/{{ parameters.githubOrg }}/{{ parameters.githubRepo }}/main/permissions-data/user-groups.json"
            method: GET
            valueSelector: "value"
            labelSelector: "label"

    - title: AWS Service Selection  
      dependencies:
        selectedUserGroup: ${{ parameters.selectedUserGroup }}
      required:
        - selectedAWSServices
        - targetEnvironment
      properties:
        selectedAWSServices:
          title: Available AWS Services
          type: array
          description: AWS services available for your selected user group
          items:
            type: string
          uniqueItems: true
          ui:field: SelectFieldFromApi
          ui:options:
            path: "proxy/github-raw/{{ parameters.githubOrg }}/{{ parameters.githubRepo }}/main/permissions-data/user-groups.json"
            method: GET
            dependencies:
              - selectedUserGroup
            transformResponse: |
              (response) => {
                const selectedUG = "${{ parameters.selectedUserGroup }}";
                const userGroup = response.find(ug => ug.value === selectedUG);
                
                if (userGroup && userGroup.services) {
                  return userGroup.services.map(service => ({
                    value: service,
                    label: service.toUpperCase()
                  }));
                }
                
                return [];
              }
            valueSelector: "value"
            labelSelector: "label"
          ui:widget: checkboxes
        
        targetEnvironment:
          title: Target Environment
          type: string
          description: AWS environment where you need access
          enum: ["dev", "staging", "prod"]
          enumNames: ["Development", "Staging", "Production"]
          ui:widget: radio
        
        accessDuration:
          title: Access Duration
          type: string
          description: How long do you need access?
          enum: ["1h", "4h", "8h", "24h", "7d"]
          enumNames: ["1 Hour", "4 Hours", "8 Hours", "24 Hours", "7 Days"]
          default: "8h"
          ui:widget: select
        
        businessJustification:
          title: Business Justification
          type: string
          description: Why do you need access to these AWS services?
          ui:widget: textarea
          ui:options:
            rows: 4
          ui:placeholder: "Provide detailed justification for access request..."

  steps:
    - id: fetch-user-group-mapping
      name: Fetch User Group Mapping
      action: http:backstage:request
      input:
        method: GET
        path: /proxy/github-raw/${{ parameters.githubOrg }}/${{ parameters.githubRepo }}/main/permissions-data/user-group-mapping.json

    - id: fetch-user-groups-data
      name: Fetch User Groups Configuration
      action: http:backstage:request
      input:
        method: GET
        path: /proxy/github-raw/${{ parameters.githubOrg }}/${{ parameters.githubRepo }}/main/permissions-data/user-groups.json

    - id: create-access-request-log
      name: Create AWS Access Request Log
      action: debug:log
      input:
        message: |
          AWS Service Access Request:
          User: ${{ parameters.currentUserEmail }} (${{ parameters.currentUserName }})
          User Group: ${{ parameters.selectedUserGroup }}
          Services: ${{ parameters.selectedAWSServices }}
          Environment: ${{ parameters.targetEnvironment }}
          Duration: ${{ parameters.accessDuration }}
          Justification: ${{ parameters.businessJustification }}
          Timestamp: ${{ "" }}$now()

    - id: generate-session-token
      name: Generate AWS Session Token
      action: debug:log
      input:
        message: |
          Generated AWS Access Session:
          Session Token: aws-harness-${{ parameters.selectedUserGroup }}-${{ parameters.targetEnvironment }}-${{ "" }}$millis()
          AWS Role ARN: arn:aws:iam::123456789012:role/HarnessIDP-${{ parameters.selectedUserGroup }}
          Environment: ${{ parameters.targetEnvironment }}
          Valid Until: ${{ parameters.accessDuration }} from now
          Allowed Services: ${{ parameters.selectedAWSServices }}

    - id: create-github-access-record
      name: Log AWS Access Request to GitHub
      action: publish:github:pull-request
      input:
        repoUrl: github.com?repo=${{ parameters.githubRepo }}&owner=${{ parameters.githubOrg }}
        branchName: aws-access-log-${{ parameters.selectedUserGroup }}-${{ "" }}$millis()
        targetBranchName: main
        title: "AWS Access Request: ${{ parameters.selectedUserGroup }} - ${{ parameters.currentUserEmail }}"
        description: |
          # AWS Service Access Request
          
          **Requested by:** ${{ parameters.currentUserEmail }} (${{ parameters.currentUserName }})
          **User Group:** ${{ parameters.selectedUserGroup }}
          **Environment:** ${{ parameters.targetEnvironment }}
          **Duration:** ${{ parameters.accessDuration }}
          **Services:** ${{ parameters.selectedAWSServices }}
          
          **Business Justification:**
          ${{ parameters.businessJustification }}
          
          **Generated AWS Session Details:**
          - Session Token: `aws-harness-${{ parameters.selectedUserGroup }}-${{ parameters.targetEnvironment }}-timestamp`
          - AWS Role ARN: `arn:aws:iam::123456789012:role/HarnessIDP-${{ parameters.selectedUserGroup }}`
          - Region: `us-east-1`
          
          **AWS CLI Commands:**
          ```bash
          aws sts assume-role \
            --role-arn arn:aws:iam::123456789012:role/HarnessIDP-${{ parameters.selectedUserGroup }} \
            --role-session-name HarnessIDP-${{ parameters.currentUserEmail }}-timestamp \
            --external-id harness-idp-${{ parameters.selectedUserGroup }}
          ```
          
          ---
          *ðŸ¤– Generated with Harness IDP - AWS Service Access Workflow*
        commitMessage: "Add AWS access request for ${{ parameters.selectedUserGroup }} by ${{ parameters.currentUserEmail }}"
        targetPath: access-logs/
        token: ${{ secrets.GITHUB_TOKEN }}

  output:
    status: "APPROVED"
    requestId: "aws-${{ parameters.selectedUserGroup }}-${{ "" }}$millis()"
    userEmail: ${{ parameters.currentUserEmail }}
    userName: ${{ parameters.currentUserName }}
    userGroup: ${{ parameters.selectedUserGroup }}
    environment: ${{ parameters.targetEnvironment }}
    duration: ${{ parameters.accessDuration }}
    services: ${{ parameters.selectedAWSServices }}
    awsRoleArn: "arn:aws:iam::123456789012:role/HarnessIDP-${{ parameters.selectedUserGroup }}"
    sessionToken: "aws-harness-${{ parameters.selectedUserGroup }}-${{ parameters.targetEnvironment }}-timestamp"
    instructions: "Use the AWS CLI with the provided role ARN. Copy the CLI commands from the GitHub PR for access."
    auditLog: "https://github.com/${{ parameters.githubOrg }}/${{ parameters.githubRepo }}/pulls"
    nextSteps:
      - "Check the GitHub PR created for this request"
      - "Copy the AWS CLI assume-role command from the PR"
      - "Execute the command in your terminal"
      - "Export the returned credentials"
      - "Access the approved AWS services"