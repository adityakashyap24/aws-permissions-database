apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: aws-service-access-workflow
  title: AWS Service Access Request
  description: Request access to AWS services based on your user group permissions
  annotations:
    backstage.io/techdocs-ref: dir:.
  tags:
    - aws
    - service-access
    - cloud
    - permissions
spec:
  owner: cloud-platform-team
  type: service
  parameters:
    - title: Repository Configuration
      required:
        - githubOrg
        - githubRepo
      properties:
        githubOrg:
          title: GitHub Organization
          type: string
          description: GitHub organization containing the AWS permissions database
          default: adityakashyap24
          ui:autofocus: true
        githubRepo:
          title: GitHub Repository
          type: string
          description: Repository name containing AWS permissions and services data
          default: aws-permissions-database

    - title: User Group Selection
      required:
        - selectedUserGroup
      properties:
        selectedUserGroup:
          title: Select Your User Group
          type: string
          description: Choose your user group to see available AWS services
          ui:field: SelectFieldFromApi
          ui:options:
            path: proxy/github-raw/{{ parameters.githubOrg }}/{{ parameters.githubRepo }}/main/permissions-data/user-groups.json
            method: GET            
            valueSelector: "value"
            labelSelector: "label"

    - title: AWS Service Selection
      required:
        - selectedAWSServices
        - targetEnvironment
      properties:
        selectedAWSServices:
          title: Available AWS Services
          type: array
          description: AWS services you can access based on your user group permissions
          items:
            type: string
          uniqueItems: true
          ui:field: SelectFieldFromApi
          ui:options:
            path: proxy/github-raw/{{ parameters.githubOrg }}/{{ parameters.githubRepo }}/main/permissions-data/aws-services.json
            method: GET
            dependencies:
              selectedUserGroup: ${{ parameters.selectedUserGroup }}
            valueSelector: "awsServices"
            arraySelector: "$"
            valueField: "$key"
            labelField: "name"
            descriptionField: "description"
            filterExpression: |
              $userGroupData := $.userGroups["${{ parameters.selectedUserGroup }}"];
              $userAWSServices := $userGroupData.awsServices;
              $awsServices := awsServices;
              $filter($keys($awsServices), function($serviceId) {
                $serviceId in $userAWSServices
              })
          ui:widget: checkboxes
          ui:options:
            inline: false
        
        targetEnvironment:
          title: Target Environment
          type: string
          description: AWS environment where you need access
          enum: ["dev", "staging", "prod"]
          enumNames: ["Development", "Staging", "Production"]
          ui:widget: radio
        
        accessDuration:
          title: Access Duration
          type: string
          description: How long do you need access?
          enum: ["1h", "4h", "8h", "24h", "7d"]
          enumNames: ["1 Hour", "4 Hours", "8 Hours", "24 Hours", "7 Days"]
          default: "8h"
          ui:widget: select
        
        businessJustification:
          title: Business Justification
          type: string
          description: Why do you need access to these AWS services?
          ui:widget: textarea
          ui:options:
            rows: 4
          ui:placeholder: "Provide detailed justification for access request..."

  steps:
    - id: fetch-user-group-data
      name: Fetch User Group AWS Permissions
      action: http:backstage:request
      input:
        method: GET
        url: https://raw.githubusercontent.com/${{ parameters.githubOrg }}/${{ parameters.githubRepo }}/main/permissions-data/user-groups.json
        headers:
          Authorization: token <+secrets.getValue("github_token")>
          User-Agent: Harness-IDP-AWS-Access

    - id: fetch-aws-services
      name: Fetch AWS Services List
      action: http:backstage:request
      input:
        method: GET
        url: https://raw.githubusercontent.com/${{ parameters.githubOrg }}/${{ parameters.githubRepo }}/main/permissions-data/aws-services.json
        headers:
          Authorization: token <+secrets.getValue("github_token")>
          User-Agent: Harness-IDP-AWS-Access

    - id: validate-aws-service-access
      name: Validate AWS Service Access
      action: roadiehq:utils:json:jsonata
      input:
        data: |
          {
            "userGroups": ${{ steps['fetch-user-group-data'].output.body }},
            "awsServices": ${{ steps['fetch-aws-services'].output.body }},
            "selectedUserGroup": "${{ parameters.selectedUserGroup }}",
            "selectedAWSServices": ${{ parameters.selectedAWSServices }},
            "targetEnvironment": "${{ parameters.targetEnvironment }}",
            "accessDuration": "${{ parameters.accessDuration }}",
            "businessJustification": "${{ parameters.businessJustification }}"
          }
        expression: |
          (
            $userGroup := userGroups.userGroups[selectedUserGroup];
            $userAWSServices := $userGroup.awsServices;
            $userEnvironments := $userGroup.environment;
            $allAWSServices := awsServices.awsServices;
            
            $validateAWSService := function($serviceId) {
              $service := $allAWSServices[$serviceId];
              $hasServiceAccess := $serviceId in $userAWSServices;
              $hasEnvironmentAccess := targetEnvironment in $userEnvironments;
              {
                "serviceId": $serviceId,
                "serviceName": $service.name,
                "description": $service.description,
                "hasServiceAccess": $hasServiceAccess,
                "hasEnvironmentAccess": $hasEnvironmentAccess,
                "accessGranted": $hasServiceAccess and $hasEnvironmentAccess,
                "denialReason": $hasServiceAccess ? 
                  ($hasEnvironmentAccess ? null : "Environment access denied") : 
                  "Service not in user group permissions"
              }
            };
            
            $validatedServices := selectedAWSServices.($validateAWSService($));
            $grantedServices := $validatedServices[accessGranted = true];
            $deniedServices := $validatedServices[accessGranted = false];
            
            {
              "userGroup": {
                "id": selectedUserGroup,
                "name": $userGroup.name,
                "description": $userGroup.description,
                "awsServices": $userAWSServices,
                "allowedEnvironments": $userEnvironments,
                "costCenter": $userGroup.metadata.costCenter,
                "owner": $userGroup.metadata.owner
              },
              "accessRequest": {
                "totalRequested": $count(selectedAWSServices),
                "totalGranted": $count($grantedServices),
                "totalDenied": $count($deniedServices),
                "targetEnvironment": targetEnvironment,
                "accessDuration": accessDuration,
                "grantedServices": $grantedServices,
                "deniedServices": $deniedServices
              },
              "requestMetadata": {
                "businessJustification": businessJustification,
                "timestamp": $now(),
                "githubRepo": "${{ parameters.githubOrg }}/${{ parameters.githubRepo }}",
                "requestId": "aws-" & selectedUserGroup & "-" & $string($toMillis($now()))
              }
            }
          )

    - id: generate-aws-access-session
      name: Generate AWS Access Session
      action: roadiehq:utils:json:jsonata
      input:
        data: ${{ steps['validate-aws-service-access'].output.result }}
        expression: |
          (
            $grantedServices := accessRequest.grantedServices;
            $timestamp := requestMetadata.timestamp;
            $userGroupId := userGroup.id;
            $environment := accessRequest.targetEnvironment;
            $duration := accessRequest.accessDuration;
            $requestId := requestMetadata.requestId;
            
            $count($grantedServices) > 0 ? 
            {
              "success": true,
              "sessionToken": "aws-harness-" & $userGroupId & "-" & $environment & "-" & $string($toMillis($timestamp)),
              "awsRoleArn": "arn:aws:iam::123456789012:role/HarnessIDP-" & $replace($userGroup.name, " ", ""),
              "sessionDuration": $duration,
              "validUntil": $fromMillis($toMillis($timestamp) + (
                $duration = "1h" ? 3600000 :
                $duration = "4h" ? 14400000 :
                $duration = "8h" ? 28800000 :
                $duration = "24h" ? 86400000 :
                $duration = "7d" ? 604800000 : 28800000
              )),
              "allowedServices": $grantedServices.serviceId,
              "environment": $environment,
              "requestId": $requestId,
              "awsCredentials": {
                "accessMethod": "assume-role",
                "roleArn": "arn:aws:iam::123456789012:role/HarnessIDP-" & $replace($userGroup.name, " ", ""),
                "sessionName": "HarnessIDP-" & $userGroupId & "-" & $string($toMillis($timestamp)),
                "externalId": "harness-idp-" & $userGroupId,
                "region": "us-east-1"
              },
              "cliCommands": {
                "assumeRole": "aws sts assume-role --role-arn arn:aws:iam::123456789012:role/HarnessIDP-" & $replace($userGroup.name, " ", "") & " --role-session-name HarnessIDP-" & $userGroupId & "-" & $string($toMillis($timestamp)) & " --external-id harness-idp-" & $userGroupId,
                "exportCredentials": "export AWS_ACCESS_KEY_ID=<access-key-from-assume-role>; export AWS_SECRET_ACCESS_KEY=<secret-key-from-assume-role>; export AWS_SESSION_TOKEN=<session-token-from-assume-role>"
              }
            } : 
            {
              "success": false,
              "message": "No AWS services accessible with current permissions and environment",
              "deniedServices": accessRequest.deniedServices.serviceName,
              "denialReasons": $distinct(accessRequest.deniedServices.denialReason),
              "requestId": $requestId
            }
          )

    - id: create-aws-access-record
      name: Log AWS Access Request to GitHub
      action: http:backstage:request
      input:
        method: PUT
        url: https://api.github.com/repos/${{ parameters.githubOrg }}/${{ parameters.githubRepo }}/contents/access-logs/${{ steps['generate-aws-access-session'].output.result.requestId || 'denied' }}.json
        headers:
          Authorization: token <+secrets.getValue("github_token")>
          Accept: application/vnd.github.v3+json
          User-Agent: Harness-IDP-AWS-Access
        body:
          message: "AWS service access request: ${{ parameters.selectedUserGroup }} - ${{ parameters.targetEnvironment }} - ${{ parameters.businessJustification }}"
          content: |
            ${{ {
              "accessType": "aws-services",
              "requestId": steps['generate-aws-access-session'].output.result.requestId,
              "userGroup": steps['validate-aws-service-access'].output.result.userGroup,
              "accessRequest": steps['validate-aws-service-access'].output.result.accessRequest,
              "awsCredentials": steps['generate-aws-access-session'].output.result,
              "requestMetadata": steps['validate-aws-service-access'].output.result.requestMetadata,
              "auditInfo": {
                "requestedAt": steps['validate-aws-service-access'].output.result.requestMetadata.timestamp,
                "requestedBy": "harness-idp-user",
                "harnessWorkflowId": "aws-service-access-workflow",
                "githubCommitSha": "auto-generated"
              }
            } | base64 }}
          branch: main

    - id: generate-access-summary
      name: Generate AWS Access Summary
      action: roadiehq:utils:json:jsonata
      input:
        data: |
          {
            "validation": ${{ steps['validate-aws-service-access'].output.result }},
            "credentials": ${{ steps['generate-aws-access-session'].output.result }}
          }
        expression: |
          {
            "awsAccessSummary": {
              "status": credentials.success ? "APPROVED" : "DENIED",
              "requestId": credentials.requestId,
              "userGroup": validation.userGroup.name,
              "environment": validation.accessRequest.targetEnvironment,
              "duration": validation.accessRequest.accessDuration,
              "requestedServices": validation.accessRequest.totalRequested,
              "approvedServices": validation.accessRequest.totalGranted,
              "deniedServices": validation.accessRequest.totalDenied,
              "sessionToken": credentials.sessionToken,
              "awsRoleArn": credentials.awsRoleArn,
              "sessionValidity": credentials.validUntil,
              "allowedAWSServices": credentials.allowedServices,
              "awsCredentials": credentials.awsCredentials,
              "cliCommands": credentials.cliCommands,
              "instructions": credentials.success ? 
                "Use the AWS CLI with the provided role ARN. Session valid until " & $string(credentials.validUntil) & ". Copy the CLI commands below to access AWS services." :
                credentials.message,
              "nextSteps": credentials.success ? [
                "Copy the AWS CLI assume-role command",
                "Execute the command in your terminal", 
                "Export the returned credentials",
                "Access the approved AWS services"
              ] : [
                "Contact your administrator for access",
                "Verify your user group permissions",
                "Check environment access requirements"
              ],
              "auditLog": "https://github.com/" & validation.requestMetadata.githubRepo & "/tree/main/access-logs",
              "supportContact": "aws-support@company.com"
            }
          }

  output:
    status: ${{ steps['generate-access-summary'].output.result.awsAccessSummary.status }}
    requestId: ${{ steps['generate-access-summary'].output.result.awsAccessSummary.requestId }}
    userGroup: ${{ steps['generate-access-summary'].output.result.awsAccessSummary.userGroup }}
    environment: ${{ steps['generate-access-summary'].output.result.awsAccessSummary.environment }}
    sessionToken: ${{ steps['generate-access-summary'].output.result.awsAccessSummary.sessionToken }}
    awsRoleArn: ${{ steps['generate-access-summary'].output.result.awsAccessSummary.awsRoleArn }}
    allowedServices: ${{ steps['generate-access-summary'].output.result.awsAccessSummary.allowedAWSServices }}
    cliCommands: ${{ steps['generate-access-summary'].output.result.awsAccessSummary.cliCommands }}
    instructions: ${{ steps['generate-access-summary'].output.result.awsAccessSummary.instructions }}
    nextSteps: ${{ steps['generate-access-summary'].output.result.awsAccessSummary.nextSteps }}
    awsCredentials: ${{ steps['generate-access-summary'].output.result.awsAccessSummary.awsCredentials }}
    auditLog: ${{ steps['generate-access-summary'].output.result.awsAccessSummary.auditLog }}
    summary: ${{ steps['generate-access-summary'].output.result.awsAccessSummary }}